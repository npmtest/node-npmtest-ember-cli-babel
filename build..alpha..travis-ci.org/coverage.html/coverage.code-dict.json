{"/home/travis/build/npmtest/node-npmtest-ember-cli-babel/test.js":"/* istanbul instrument in package npmtest_ember_cli_babel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-babel/lib.npmtest_ember_cli_babel.js":"/* istanbul instrument in package npmtest_ember_cli_babel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_babel = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_babel = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-babel/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-babel && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_babel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_babel\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_babel.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_cli_babel.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_babel.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_cli_babel.__dirname + '/lib.npmtest_ember_cli_babel.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-babel/node_modules/ember-cli-babel/index.js":"/* jshint node: true */\n'use strict';\n\nconst VersionChecker = require('ember-cli-version-checker');\nconst clone = require('clone');\nconst path = require('path');\n\nfunction addBaseDir(Plugin) {\n  let type = typeof Plugin;\n\n  if (type === 'function' && !Plugin.baseDir) {\n    Plugin.baseDir = () => __dirname;\n  } else if (type === 'object' && Plugin !== null && Plugin.default) {\n    addBaseDir(Plugin.default);\n  }\n}\n\nmodule.exports = {\n  name: 'ember-cli-babel',\n  configKey: 'ember-cli-babel',\n\n  init: function() {\n    this._super.init && this._super.init.apply(this, arguments);\n\n    let checker = new VersionChecker(this);\n    let dep = this.emberCLIChecker = checker.for('ember-cli', 'npm');\n\n    this._shouldShowBabelDeprecations = !dep.lt('2.11.0-beta.2');\n  },\n\n  buildBabelOptions(_config) {\n    let config = _config || this._getAddonOptions();\n\n    return this._getBabelOptions(config);\n  },\n\n  transpileTree(tree, config) {\n    return require('broccoli-babel-transpiler')(tree, this.buildBabelOptions(config));\n  },\n\n  setupPreprocessorRegistry: function(type, registry) {\n    registry.add('js', {\n      name: 'ember-cli-babel',\n      ext: 'js',\n      toTree: (tree) => this.transpileTree(tree)\n    });\n  },\n\n  _shouldIncludePolyfill: function() {\n    let addonOptions = this._getAddonOptions();\n    let babelOptions = addonOptions.babel;\n    let customOptions = addonOptions['ember-cli-babel'];\n\n    if (this._shouldShowBabelDeprecations && !this._polyfillDeprecationPrinted &&\n      babelOptions && 'includePolyfill' in babelOptions) {\n\n      this._polyfillDeprecationPrinted = true;\n\n      // we can use writeDeprecateLine() here because the warning will only be shown on newer Ember CLIs\n      this.ui.writeDeprecateLine(\n        'Putting the \"includePolyfill\" option in \"babel\" is deprecated, please put it in \"ember-cli-babel\" instead.');\n    }\n\n    if (customOptions && 'includePolyfill' in customOptions) {\n      return customOptions.includePolyfill === true;\n    } else if (babelOptions && 'includePolyfill' in babelOptions) {\n      return babelOptions.includePolyfill === true;\n    } else {\n      return false;\n    }\n  },\n\n  _importPolyfill: function(app) {\n    let polyfillPath = 'vendor/babel-polyfill/polyfill.js';\n\n    if (this.import) {  // support for ember-cli >= 2.7\n      this.import(polyfillPath, { prepend: true });\n    } else if (app.import) { // support ember-cli < 2.7\n      app.import(polyfillPath, { prepend: true });\n    } else {\n      console.warn('Please run: ember install ember-cli-import-polyfill');\n    }\n  },\n\n  treeForVendor: function() {\n    if (!this._shouldIncludePolyfill()) { return; }\n\n    const Funnel = require('broccoli-funnel');\n    const UnwatchedDir = require('broccoli-source').UnwatchedDir;\n\n    // Find babel-core's browser polyfill and use its directory as our vendor tree\n    let polyfillDir = path.dirname(require.resolve('babel-polyfill/dist/polyfill'));\n\n    return new Funnel(new UnwatchedDir(polyfillDir), {\n      destDir: 'babel-polyfill'\n    });\n  },\n\n  included: function(app) {\n    this._super.included.apply(this, arguments);\n    this.app = app;\n\n    if (this._shouldIncludePolyfill()) {\n      this._importPolyfill(app);\n    }\n  },\n\n  isPluginRequired(pluginName) {\n    let targets = this._getTargets();\n\n    // if no targets are setup, assume that all plugins are required\n    if (!targets) { return true; }\n\n    const isPluginRequired = require('babel-preset-env').isPluginRequired;\n    const pluginList = require('babel-preset-env/data/plugins');\n\n    return isPluginRequired(targets, pluginList[pluginName]);\n  },\n\n  _getAddonOptions: function() {\n    return (this.parent && this.parent.options) || (this.app && this.app.options) || {};\n  },\n\n  _getAddonProvidedConfig: function(addonOptions) {\n    let parentName;\n\n    if (this.parent) {\n      if (typeof this.parent.name === 'function') {\n        parentName = this.parent.name();\n      } else {\n        parentName = this.parent.name;\n      }\n    }\n\n    let babelOptions = clone(addonOptions.babel || {});\n\n    // used only to support using ember-cli-babel@6 at the\n    // top level (app or addon during development) on ember-cli\n    // older than 2.13\n    //\n    // without this, we mutate the same shared `options.babel.plugins`\n    // that is used to transpile internally (via `_prunedBabelOptions`\n    // in older ember-cli versions)\n    let babel6Options = clone(addonOptions.babel6 || {});\n\n    let options;\n    // options.modules is set only for things assuming babel@5 usage\n    if (babelOptions.modules) {\n      // using babel@5 configuration with babel@6\n      // without overriding here we would trigger\n      // an error\n      options = Object.assign({}, babel6Options);\n    } else {\n      // shallow merge both babelOptions and babel6Options\n      // (plugins/postTransformPlugins are handled separately)\n      options = Object.assign({}, babelOptions, babel6Options);\n    }\n\n    let plugins = [].concat(babelOptions.plugins, babel6Options.plugins).filter(Boolean);\n    let postTransformPlugins = [].concat(babelOptions.postTransformPlugins, babel6Options.postTransformPlugins).filter(Boolean);\n\n    return {\n      options,\n      plugins,\n      postTransformPlugins\n    };\n  },\n\n  _getBabelOptions(config) {\n    let addonProvidedConfig = this._getAddonProvidedConfig(config);\n    let shouldCompileModules = this._shouldCompileModules(config);\n\n    let options = {};\n    let userPlugins = addonProvidedConfig.plugins;\n    let userPostTransformPlugins = addonProvidedConfig.postTransformPlugins;\n\n    options.plugins = [].concat(\n      userPlugins,\n      shouldCompileModules && this._getModulesPlugin(),\n      this._getPresetEnvPlugins(addonProvidedConfig),\n      userPostTransformPlugins\n    ).filter(Boolean);\n\n    if (shouldCompileModules) {\n      options.moduleIds = true;\n      options.resolveModuleSource = require('amd-name-resolver').moduleResolve;\n    }\n\n    options.highlightCode = false;\n\n    return options;\n  },\n\n  _getPresetEnvPlugins(config) {\n    let options = config.options;\n\n    let targets = this._getTargets();\n    let browsers = targets && targets.browsers;\n    let presetOptions = Object.assign({}, options, {\n      modules: false,\n      targets: { browsers },\n    });\n\n    let presetEnvPlugins = this._presetEnv(null, presetOptions).plugins;\n\n    presetEnvPlugins.forEach(function(pluginArray) {\n      let Plugin = pluginArray[0];\n      addBaseDir(Plugin);\n    });\n\n    return presetEnvPlugins;\n  },\n\n  _presetEnv() {\n    const presetEnv = require('babel-preset-env').default;\n\n    return presetEnv.apply(null, arguments);\n  },\n\n  _getTargets() {\n    return this.project && this.project.targets && this.project.targets;\n  },\n\n  _getModulesPlugin() {\n    const ModulesTransform = require('babel-plugin-transform-es2015-modules-amd');\n\n    addBaseDir(ModulesTransform);\n\n    return [\n      [ModulesTransform, { noInterop: true }],\n    ];\n  },\n\n  /*\n   * Used to discover if the addon's current configuration will compile modules\n   * or not.\n   *\n   * @public\n   * @method shouldCompileModules\n   */\n  shouldCompileModules() {\n    return this._shouldCompileModules(this._getAddonOptions());\n  },\n\n  // will use any provided configuration\n  _shouldCompileModules(options) {\n    let addonOptions = options['ember-cli-babel'];\n    let babelOptions = options.babel;\n\n    if (addonOptions && 'compileModules' in addonOptions) {\n      return addonOptions.compileModules;\n    } else if (babelOptions && 'compileModules' in babelOptions) {\n      if (this._shouldShowBabelDeprecations && !this._compileModulesDeprecationPrinted) {\n        this._compileModulesDeprecationPrinted = true;\n        // we can use writeDeprecateLine() here because the warning will only be shown on newer Ember CLIs\n        this.ui.writeDeprecateLine('Putting the \"compileModules\" option in \"babel\" is deprecated, please put it in \"ember-cli-babel\" instead.');\n      }\n\n      return babelOptions.compileModules;\n    } else {\n      return this.emberCLIChecker.gt('2.12.0-alpha.1');\n    }\n  },\n\n};\n"}